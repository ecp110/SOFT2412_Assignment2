/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
}

jar {
    manifest {
        attributes 'Main-Class': 'movie.App'
    }
}

apply plugin: 'java'

tasks.withType(Javadoc) {
      failOnError false
      options.addStringOption('Xdoclint:none', '-quiet')
      options.addStringOption('encoding', 'UTF-8')
      options.addStringOption('charSet', 'UTF-8')
}


javadoc {
    options.addBooleanOption('html5', true)
}

run {
    standardInput = System.in
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
}

application {
    // Define the main class for the application.
    mainClass = 'movie.Engine'
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

test {
    reports.junitXml.destination = file("$buildDir/xml")
    reports.html.destination = file("$buildDir/html")
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport { 
    reports { 
        html.enabled = true 
        csv.enabled = true 
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

}  